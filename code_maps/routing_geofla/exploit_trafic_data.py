#!/usr/bin/python
# -*- coding: utf-8 -*-

import add_to_path
from add_to_path import path_data
import os, sys
import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.collections import PatchCollection
import matplotlib.font_manager as fm
#import shapefile
from mpl_toolkits.basemap import Basemap
from shapely.geometry import Point, Polygon, MultiPoint, MultiPolygon, shape
from shapely.prepared import prep
from descartes import PolygonPatch
#from pysal.esda.mapclassify import Natural_Breaks as nb
from matplotlib import colors

def dec_json(chemin):
  with open(chemin, 'r') as fichier:
    return json.loads(fichier.read())

def enc_json(database, chemin):
  with open(chemin, 'w') as fichier:
    json.dump(database, fichier)

path_built = os.path.join(path_data, 'data_maps', 'data_built')

# #############
# FRANCE MAP
# #############

# excludes Corsica
x1 = -5.
x2 = 9.
y1 = 42
y2 = 52.

# Lambert conformal for France (as suggested by IGN... check WGS84 though?)
m_fra = Basemap(resolution='i',
                projection='lcc',
                ellps = 'WGS84',
                lat_1 = 44.,
                lat_2 = 49.,
                lat_0 = 46.5,
                lon_0 = 3,
                llcrnrlat=y1,
                urcrnrlat=y2,
                llcrnrlon=x1,
                urcrnrlon=x2)

path_dir_120 = os.path.join(path_data, 'data_maps', 'ROUTE120_WGS84')

ls_files_120 = [('TRONCON_ROUTE', 'routes'),
                ('NOEUD_ROUTIER', 'noeuds'),
                ('COMMUNE', 'communes'),
                ('RATTACHEMENT_COMMUNE', 'rat_com')]

for file_120_orig, file_120_dest in ls_files_120:
  m_fra.readshapefile(os.path.join(path_dir_120, file_120_orig),
                      file_120_dest,
                      color = 'none',
                      zorder = 2)

# Collect A1 - A89 and check order (extend to all highways using CLASS_ADM) 
# (shape_info['CLASS_ADM'] == 'Autoroute') &\
dict_hws = {}
for hw_ind in range(1, 90):
  hw_name = 'A{:d}'.format(hw_ind)
  ls_hw_inds = [i for i, shape_info in enumerate(m_fra.routes_info)\
                  if (shape_info['NUM_ROUTE'] == hw_name)]
  if ls_hw_inds:
    dict_hws[hw_name] = ls_hw_inds

# Length of highways
print u'\nHighway lengths (km):'
for hw_name, ls_hw_inds in dict_hws.items():
  longueur = 0
  for hw_ind in ls_hw_inds:
    longueur += m_fra.routes_info[hw_ind]['LONGUEUR']
  print hw_name, longueur

# Order of segments
print u'\nHighway segments: ordered in original list?'
ls_hw_not_ordered = []
for hw_name, ls_hw_inds in dict_hws.items():
  if all(m_fra.routes[hw_ind][0] == m_fra.routes[ls_hw_inds[i-1]][-1]\
           for i, hw_ind in enumerate(ls_hw_inds[1:], start = 1)):
    print hw_name, ': ordered (simple)'
  else:
    print hw_name, ': not ordered'
    ls_hw_not_ordered.append(hw_name)

# SYSTEMATIC SEARCH

def find_connection(coord, ls_segments, ls_segment_inds):
  # look for a match
  # returns segment_ind and segment to get rid of
  # return coord to be searched among remaining segments
  for segment_ind, segment in zip(ls_segment_inds, ls_segments):
    if (coord == segment[0]):
      return (segment_ind, segment, segment[-1])
    elif (coord == segment[-1]):
      return (segment_ind, segment, segment[0])
  return (None, None, None)

dict_now_ordered = {}
for hw_name in ls_hw_not_ordered:
  ls_hw_inds = dict_hws[hw_name]
  ls_ls_ordered = []
  ls_segment_inds = ls_hw_inds
  while ls_segment_inds:
    ls_ordered = [ls_segment_inds[0]] # initialize segment list
    ls_segment_inds = ls_segment_inds[1:] # going to search only other segments
    ls_segments = [m_fra.routes[ind] for ind in ls_segment_inds]
  
    # Look at right hand side i.e. last point of segment
    coord_0 = m_fra.routes[ls_ordered[0]][-1]
    while coord_0:
      segment_ind, segment, coord = find_connection(coord_0, ls_segments, ls_segment_inds)
      coord_0 = coord
      if coord_0:
        ls_ordered.append(segment_ind)
        ls_segments.remove(segment)
        ls_segment_inds.remove(segment_ind)
    
    # Look at left hand side i.e. first point of segment
    coord_0 =  m_fra.routes[ls_ordered[0]][0]
    while coord_0:
      segment_ind, segment, coord = find_connection(coord_0, ls_segments, ls_segment_inds)
      coord_0 = coord
      if coord_0:
        ls_ordered = [segment_ind] + ls_ordered
        ls_segments.remove(segment)
        ls_segment_inds.remove(segment_ind)
  
    ls_ls_ordered.append(ls_ordered)
  
  dict_now_ordered[hw_name] = ls_ls_ordered

# Highway in several pieces
print u'\nHighways found to be in several pieces:'
for hw_name, ls_ls_hw_inds in dict_now_ordered.items():
	if len(ls_ls_hw_inds) != 1:
		print hw_name

# DRAW HIGHWAY: A35 has several pieces, may also have one way parts?
fig = plt.figure(facecolor = 'white')
ax = fig.add_subplot(111, aspect = 'equal') #, frame_on = False)
for shape, shape_info in zip(m_fra.routes, m_fra.routes_info):
  if (shape_info['CLASS_ADM'] == 'Autoroute') &\
     (shape_info['NUM_ROUTE'] == 'A35'):
    xx, yy = zip(*shape)
    temp = ax.plot(xx, yy, linewidth = 0.5, color = 'k')
ax.autoscale_view(True, True, True)
ax.axis('off')
ax.set_axis_bgcolor('red')
plt.tight_layout()
plt.show()
